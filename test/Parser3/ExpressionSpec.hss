module Parser2.ExpressionSpec where

import Test.Hspec hiding (context)

import qualified AST2.Expression as Expression
import qualified AST2.Identifier as Identifier
import Parser2.Model
import qualified Parser2.Parser as Parser
import qualified Parser2.Expression as Expression
import qualified Utils.Either as Either
import qualified Utils.NonEmpty as NonEmpty
import qualified Utils.String as String


spec :: Spec
spec =
    let
        aFilePath = "some/File/Path.pa"

        buildQuote lineFrom columnFrom lineTo lineColumn =
            Quote aFilePath lineFrom columnFrom lineTo lineColumn

        testSuccess sourceCode expressionQuote expected =
            Parsed expressionQuote expected
                |> Right
                |> test sourceCode

        test sourceCode expected =
            Expression.expressionParser
                |> Parser.run aFilePath sourceCode
                |> (`shouldBe` expected)
    in
    describe "Expression Parser" <| do
        it "Fails on something that is not an expression" <|
            let
                sourceCode =
                    "???"
            in
            Expression.expressionParser
                |> Parser.run aFilePath sourceCode
                |> (`shouldSatisfy` Either.isLeft)


        describe "ParentesizedExpression" <| do
            it "Parses an expression in parentheses" <|
                let
                    source =
                        "(AnExpression)"

                    quote =
                        Quote aFilePath 1 2 1 13

                    expected =
                        Identifier.referenceId "AnExpression"
                            |> Expression.Reference
                in
                testSuccess source quote expected


            it "Parses an expression in parentheses with spaces" <|
                let
                    source =
                        "( AnExpression )"

                    quote =
                        Quote aFilePath 1 3 1 14

                    expected =
                        Identifier.referenceId "AnExpression"
                            |> Expression.Reference
                in
                testSuccess source quote expected



        describe "Reference" <| do
            it "Parses a reference starting with an upper case" <|
                let
                    source =
                        "PascalCase"

                    quote =
                        Quote aFilePath 1 1 1 10

                    expected =
                        Identifier.referenceId source
                            |> Expression.Reference
                in
                testSuccess source quote expected


            it "Parses a reference starting with a lower case" <|
                let
                    source =
                        "camelCase"

                    quote =
                        Quote aFilePath 1 1 1 9

                    expected =
                        Identifier.referenceId source
                            |> Expression.Reference
                in
                testSuccess source quote expected


        describe "If Then Else" <|
            let
                trueExpression =
                    Expression.TrueLiteral
                        |> Expression.Bool
                        |> Expression.Value
            in do
            it "Parses one word condition and alternatives" <|
                let
                    source =
                        [ "if True then"
                        , "    True"
                        , "else"
                        , "    True"
                        ]
                            |> String.mergeLines

                    expressionQuote =
                        buildQuote 1 1 4 8

                    expected =
                        Expression.If
                            (Parsed (buildQuote 1 4 1 7) trueExpression)
                            (Parsed (buildQuote 2 5 2 8) trueExpression)
                            (Parsed (buildQuote 4 5 4 8) trueExpression)
                in
                testSuccess source expressionQuote expected


            it "Parses application condition and alternatives" <|
                let
                    source =
                        [ "if f a then"
                        , "    f a"
                        , "else"
                        , "    f a"
                        ]
                            |> String.mergeLines

                    application line fromColumn =
                        Expression.Application
                            { functionName =
                                Parsed
                                    (buildQuote line fromColumn line fromColumn)
                                    (Identifier.referenceId "f")
                            , args = args line (fromColumn + 2)
                            }

                    args line fromColumn =
                        NonEmpty.build
                            (Parsed (buildQuote line fromColumn line fromColumn)
                                (Identifier.referenceId "a"
                                    |> Expression.Reference
                                )
                            )
                            []

                    expressionQuote =
                        buildQuote 1 1 4 7

                    expected =
                        Expression.If
                            (Parsed (buildQuote 1 4 1 6) <| application 1 4)
                            (Parsed (buildQuote 2 5 2 7) <| application 2 5)
                            (Parsed (buildQuote 4 5 4 7) <| application 4 5)
                in
                testSuccess source expressionQuote expected


        describe "Application" <| do
            it "Parses a one argument application" <|
                let
                    source =
                        "f a"

                    quote =
                        Quote aFilePath 1 1 1 3

                    args =
                        NonEmpty.build
                            (Parsed (buildQuote 1 3 1 3)
                                (Identifier.referenceId "a"
                                    |> Expression.Reference
                                )
                            )
                            []

                    expected =
                        Expression.Application
                            { functionName =
                                Parsed
                                    (buildQuote 1 1 1 1)
                                    (Identifier.referenceId "f")
                            , args = args
                            }
                in
                testSuccess source quote expected


            it "Parses a one argument application" <|
                let
                    source =
                        "Constructor a 3 (\"blah\") "

                    quote =
                        Quote aFilePath 1 1 1 3

                    args =
                        NonEmpty.build
                            (Parsed (buildQuote 1 3 1 3)
                                (Identifier.referenceId "a"
                                    |> Expression.Reference
                                )
                            )
                            [ Parsed (buildQuote 1 3 1 3)
                                (Value.referenceId "a"
                                    |> Expression.Reference
                                )
                            , Parsed (buildQuote 1 3 1 3)
                                (Identifier.referenceId "a"
                                    |> Expression.Reference
                                )
                            ]

                    expected =
                        Expression.Application
                            { functionName =
                                Parsed
                                    (buildQuote 1 1 1 1)
                                    (Identifier.referenceId "f")
                            , args = args
                            }
                in
                testSuccess source quote expected
